# This file was generated by Ansible for {{ ansible_fqdn }}
# Do NOT modify this file by hand!

# This file is just Python, with a touch of Django which means
# you can inherit and tweak settings to your hearts content.
from sentry.conf.server import *

import os.path

CONF_ROOT = os.path.dirname(__file__)
STATIC_ROOT = '{{sentry_home}}/_static'
STATIC_URL = '/_static/'

DATABASES = {
    'default': {
        'ENGINE': '{{sentry_db_engine}}',
        'NAME': '{{sentry_db_name}}',
        'USER': '{{sentry_db_user}}',
        'PASSWORD': '{{sentry_db_password}}',
        {% if sentry_db_host %}'HOST': '{{sentry_db_host}}',{% endif %}
        {% if sentry_db_port %}'PORT': '{{sentry_db_port}}',{% endif %}
        'OPTIONS': {{sentry_db_options|to_nice_json}}
    }
}

# You should not change this setting after your database has been created
# unless you have altered all schemas first
SENTRY_USE_BIG_INTS = True

# If you're expecting any kind of real traffic on Sentry, we highly recommend
# configuring the CACHES and Redis settings

###########
# General #
###########

# Instruct Sentry that this install intends to be run by a single organization
# and thus various UI optimizations should be enabled.
SENTRY_SINGLE_ORGANIZATION = True

# Instruct Sentry to disallow new account creation
SENTRY_FEATURES['auth:register'] = False

# Sentry should make all data publicly accessible (we're behind a firewall)
SENTRY_PUBLIC = True

# Have Sentry set the Access-Control-Allow_origin header
SENTRY_ALLOW_ORIGIN = 'https://demo.energyefficientequity.com'

# Get critical announcements from Sentry
SENTRY_BEACON = True

SENTRY_DEFAULT_TIME_ZONE = '{{sentry_default_time_zone}}'

#########
# Cache #
#########

# Sentry currently utilizes two separate mechanisms. While CACHES is not a
# requirement, it will optimize several high throughput patterns.

# If you wish to use memcached, install the dependencies and adjust the config
# as shown:
#
#   pip install python-memcached
#
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#         'LOCATION': ['127.0.0.1:11211'],
#     }
# }

{% if sentry_cache_backend and sentry_cache_location %}
CACHES = {
    'default': {
        'BACKEND': '{{sentry_cache_backend}}',
        'LOCATION': '{{sentry_cache_location}}',
    }
}
{% endif %}

# A primary cache is required for things such as processing events
SENTRY_CACHE = 'sentry.cache.redis.RedisCache'

#########
# Queue #
#########

# See https://docs.getsentry.com/on-premise/server/queue/ for more
# information on configuring your queue broker and workers. Sentry relies
# on a Python framework called Celery to manage queues.

BROKER_URL = '{{sentry_broker_url}}'

###############
# Rate Limits #
###############

# Rate limits apply to notification handlers and are enforced per-project
# automatically.

SENTRY_RATELIMITER = 'sentry.ratelimits.redis.RedisRateLimiter'

##################
# Update Buffers #
##################

# Buffers (combined with queueing) act as an intermediate layer between the
# database and the storage API. They will greatly improve efficiency on large
# numbers of the same events being sent to the API in a short amount of time.
# (read: if you send any kind of real data to Sentry, you should enable buffers)

SENTRY_BUFFER = '{{sentry_buffer}}'

##########
# Quotas #
##########

# Quotas allow you to rate limit individual projects or the Sentry install as
# a whole.

SENTRY_QUOTAS = 'sentry.quotas.redis.RedisQuota'

########
# TSDB #
########

# The TSDB is used for building charts as well as making things like per-rate
# alerts possible.

SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'

###########
# Digests #
###########

# The digest backend powers notification summaries.

SENTRY_DIGESTS = 'sentry.digests.backends.redis.RedisBackend'

################
# File storage #
################

# Any Django storage backend is compatible with Sentry. For more solutions see
# the django-storages package: https://django-storages.readthedocs.org/en/latest/

SENTRY_FILESTORE = 'django.core.files.storage.FileSystemStorage'
SENTRY_FILESTORE_OPTIONS = {
    'location': '/tmp/sentry-files',
}

##############
# Web Server #
##############

# If you're using a reverse SSL proxy, you should enable the X-Forwarded-Proto
# header and uncomment the following settings
{% if nginx_enabled %}
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
{% endif %}

{% if sentry_ssl_certificate %}
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
{% endif %}

# If you're not hosting at the root of your web server,
# you need to uncomment and set it to the path where Sentry is hosted.
# FORCE_SCRIPT_NAME = '/sentry'

SENTRY_WEB_HOST = '{{sentry_web_host}}'
SENTRY_WEB_PORT = {{sentry_web_port}}
SENTRY_WEB_OPTIONS = {{sentry_web_options|to_nice_json}}

##################
# Other Settings #
##################

TWITTER_CONSUMER_KEY = '{{sentry_twitter_consumer_key}}'
TWITTER_CONSUMER_SECRET = '{{sentry_twitter_consumer_secret}}'
FACEBOOK_APP_ID = '{{sentry_facebook_app_id}}'
FACEBOOK_API_SECRET = '{{sentry_facebook_api_secret}}'
GOOGLE_OAUTH2_CLIENT_ID = '{{sentry_google_oauth2_client_id}}'
GOOGLE_OAUTH2_CLIENT_SECRET = '{{sentry_google_oauth2_client_secret}}'
GITHUB_APP_ID = '{{sentry_github_app_id}}'
GITHUB_API_SECRET = '{{sentry_github_api_secret}}'
TRELLO_API_KEY = '{{sentry_trello_api_key}}'
TRELLO_API_SECRET = '{{sentry_trello_api_secret}}'
BITBUCKET_CONSUMER_KEY = '{{sentry_bitbucket_consumer_key}}'
BITBUCKET_CONSUMER_SECRET = '{{sentry_bitbucket_consumer_secret}}'

# Additional settings
{% for option in sentry_config_additional or [] %}
{{option}}
{% endfor %}
